Databases
---

  Database Server 
    URL: localhost / ip address 
    PORT: 2453453
    credentials: {
      username: root,
      password: password
    }

  Database Client 
    * needs to know url, port, creds 
    * exec query
    * CRUD 
    Clients:
      * GUI Clients: HeidiSQL, SQLYog, Studio 3T for MongoDB
      * Shell Clients/ Command Prompts
      * Programming Client Tools (Driver: mongoose )


  Types of DB's 
  ---
    1. RDBMS 
        Examples: Oracle, MySQL, MariaDB, MS-SQLServer, PostgreSQL 
        * Data would be stored in 
          db => tables => (columns, rows)
        * data will be stored in columns and rows
        * tables can have relationships 
        * write SQL query

    2. NoSQL 
        Examples: MongoDB
        * not only SQL 
        * data will not be stored in tables 
        * data will be stored in collections 
        * data will be stored as object (JSON)

1. MongoDB 
    Installation Path: 
      C:/Program Files/MongoDB/Server/4.4/bin/

    MongoDB 
    ---
      start the server from cmd prompt 
        C:ProgramFiles/MongoDB/server/4.4>bin> mongod 
      
      in another cmd prompt- to launch shell client 
        C:ProgramFiles/MongoDB/server/4.4>bin> mongo
      
      to see all dbs 
        show dbs 
      
      to see the selected db 
        db 
      
      to create a db 
        use <db-name>

      to drop db 
        db.dropDatabase()

      to create collection 
        db.createCollection('<collection-name>')

      to see all collections inside this db 
        show collections

      insert a document inside collection
        db.employees.insert({ name: 'Steve', phone: 547456, email: 's@t.com'})

      to fetch all documents from collection 
        db.employees.find();

      to fetch one employee by phone from collection 
        db.employees.findOne({phone: 547456});

      to update a document 
        db.employees.update({phone: 547456}, { $set: { zip: 54345, address: 'wallstreet' } })

      to remove 
        db.employees.remove({exp: 20})

---
  
2. MySQL  
      Refer the project 

====

Authenthication
---
  HTTP
  --
    * stateless 
    * half-duplex 
    client => server 
    client <= server 
    
  Websocket 
  --
    * full-duplex 
    * client <=> server


  1. Session Based 
      email, password 
        1. if valid 
            session id would be created and saved in server
              session id would be sent to the brower 
                browser should store the session id in cookies 
                  (post-login pages will be accessible thereafter - provided the session id is sent thru req header)

        2. else
            login again 


  2. Token Based Auth
        email, password 
          1. if valid 
              token (JWT) would be generated 
                token would be sent to the brower 
                  browser should store the session id in cookies/local storage /session storage
                    (post-login pages will be accessible thereafter -- provided the token is sent thru req header)

          2. else
            login again 


  localhost:3000/api/auth/signup - POST
  localhost:3000/api/auth/login - POST

  


=====

